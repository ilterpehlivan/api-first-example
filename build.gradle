buildscript {
    repositories {
        mavenCentral()
    }
//	dependencies {
//		classpath 'org.springframework.cloud:spring-cloud-contract-gradle-plugin:2.2.3.RELEASE'
//	}
}

plugins {
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'org.openapi.generator' version '4.3.1'
    id "io.freefair.lombok" version "5.1.0"
    id 'java'
    id 'idea'
}


group = 'com.ilt'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
}

ext {
    set('springCloudVersion', "Hoxton.SR6")
    set('springFoxVersion', "3.0.0")
}

//sourceSets{
//	main {
//		java {
//			srcDirs = ['src/main/java', "$buildDir/generated/sources/annotationProcessor/java/main"]
//		}
//	}
//}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation "io.springfox:springfox-boot-starter:${springFoxVersion}"
    compile 'javax.validation:validation-api:2.0.1.Final'
    compile 'org.openapitools:jackson-databind-nullable:0.2.1'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.0'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation 'io.projectreactor:reactor-test'
}


dependencyManagement {
}


test {
    useJUnitPlatform()
}


def openapiSourceFile = "$rootDir/api/users-api.yaml"
def openapiTargetDir = "${buildDir}/generated"

task javaServerOpenApiGenerate(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "spring"
    inputSpec = "${openapiSourceFile}".toString()
    outputDir = "${openapiTargetDir}".toString()
    apiPackage = "${rootProject.ext.javaPackageName}.rest.interfaces"
    invokerPackage = "${rootProject.ext.javaPackageName}.rest"
    modelPackage = "${rootProject.ext.javaPackageName}.model"
    generateModelTests = false
    generateApiTests = false
    templateDir = "$rootDir/api/templates/JavaSpring"
    configOptions = [
            dateLibrary              : "java8-localdatetime"
            , hideGenerationTimestamp: "true"
//			, configPackage: rootProject.ext.javaPackageName
//            , sourceFolder           : rootProject.ext.javaGeneratedDir
            , java8                  : "true"
            , reactive               : "true"
//            , interfaceOnly          : "true"
            , useTags                : "true"
            , delegatePattern        : "true"
    ]
}
task javaClientOpenApiGenerate(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "spring"
    inputSpec = "$rootDir/api/openapi.yaml".toString()
    outputDir = "$buildDir/generated".toString()
    apiPackage = "${rootProject.ext.javaPackageName}.client.api"
    invokerPackage = "${rootProject.ext.javaPackageName}.client"
    modelPackage = "${rootProject.ext.javaPackageName}.model"
    generateModelTests = false
    generateApiTests = false
    configOptions = [
            dateLibrary   : "java8-localdatetime"
            , java8       : "true"
            , library     : "webclient"
            , reactive    : "true"
            , sourceFolder: rootProject.ext.javaGeneratedDir
    ]
}
task customOpenApiGenerate(dependsOn: ['javaServerOpenApiGenerate'])
compileJava.dependsOn tasks.customOpenApiGenerate
compileJava.dependsOn tasks.openApiValidate

//sourceSets.main.java.srcDir new File(buildDir, "${openapiTargetDir}/src/main/java")
sourceSets.main.java.srcDir "${openapiTargetDir}/src/main/java"
sourceSets.main.resources.srcDir "${openapiTargetDir}/src/main/resources"
compileJava.dependsOn processResources

openApiValidate {
    inputSpec = "$rootDir/api/openapi.yaml".toString()
    recommend = true
}

bootJar {
    mainClassName = 'com.ilt.api.ApiFirstApplication'
}

task allDeps(type: DependencyReportTask) {}
